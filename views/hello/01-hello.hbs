<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Hello</title>
    <link rel="stylesheet" type="text/css" href="/stylesheets/style.css"/>
    <script src="/javascripts/utils.js"></script>
</head>
<body onunload="">

<h1>Hello</h1>
<p>Filler text</p>

<input type="text" id="name">

<div id="invalid-name" class="hide">
    That name is in use: please choose another
</div>

<div id="submit" class="hide">
    Submit
</div>

<script>
    let activeNames = []; // names with incomplete records
    let submitContainer = document.getElementById("submit");
    let inputField = document.getElementById("name");
    let invalidName = document.getElementById("invalid-name");

    // clear input on reload
    inputField.value = "";

    // show and hide the submit button based on whether there is a name
    inputField.addEventListener("input", function() {
        let name = this.value.trim();
        let nameIsUnique = activeNames.indexOf(name.toLowerCase()) === -1;
        if (name.length && nameIsUnique) {
            submitContainer.classList.remove("hide");
        } else {
            submitContainer.classList.add("hide");
        }
        if (nameIsUnique) {
            invalidName.classList.add("hide");
        } else {
            invalidName.classList.remove("hide");
        }
    });

    // go to next page on submit
    submitContainer.addEventListener("click", function() {
        let params = {
            name: inputField.value.trim()
        };
        window.location.assign("/hello/02-input-feelings?" + encodeGetParams(params));
    });

    // get data to prevent duplicate names
    function UpdateNames() {
        fetch('/data', { method: 'GET', headers: { 'Content-Type': 'application/json', }, })
                .then((response) => response.json())
                .then((data) => {
                    console.log('Success:', data);
                    activeNames = data.filter(user => user.IS_COMPLETED === 0).map(user => user.DISPLAY_ID.trim().toLowerCase());
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
    }


    // listen for updates
    const source = new EventSource('/data/stream');
    source.addEventListener('message', function(e) {
        console.log("DATA RECEIVED", e.data);
        UpdateNames();
    }, false);

    // initial update
    UpdateNames();
</script>

</body>
</html>